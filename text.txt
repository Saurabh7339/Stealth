import * as React from "react";
import { Box, LinearProgress } from "@mui/material";
import CustomTabs from "../../tab/components/CustomTabs";
import WorkspaceDetailsHeading from "../WorkspaceCardHeading";
import CustomWorkspaceCard from "../WorkspaceCard";
import DomainDetails from "./DomainDetails";
import Connections from "./Connections";
import ClientAPITokenDetails from "./ClientAPITokenDetails";
import MyApprovalDetails from "./MyApprovalDetails";
import DataSourceDetails from "./DataSourceDetails";
import { useParams } from "react-router-dom";
import { useDispatch, useSelector } from "react-redux";
import { AppDispatch, RootState } from "../../../redux/store";
import {
  getAllDomain,
  getWorkspaceDetails,
  getWorkspaceRequestAccess,
  getAndFilterDataSource,
  getAndFilterDomain,
  getWorkspaceClientApiTokens,
  getDataSourceTagSearch,
  getDomainDatabaseType,
} from "../../../redux/workspace/workspaceAction";

const WorkspaceDetails: React.FC = () => {
  const { workspaceId } = useParams();
  const dispatch = useDispatch<AppDispatch>();

  // States
  const [isLoading, setIsLoading] = React.useState(true);
  const [isDomainUser, setIsDomainUser] = React.useState(false);
  const [isApiUser, setIsApiUser] = React.useState(false);
  const [isAppUser, setIsAppUser] = React.useState(false);
  const [conditionalDisabled, setConditionalDisabled] = React.useState(false);
  const [tabs, setTabs] = React.useState<{ label: string }[]>([]);
  const [tabIndex, setTabIndex] = React.useState(0);

  // Redux selectors
  const workspace = useSelector((state: RootState) => state?.workspace);
  const { allConnection } = useSelector((state: RootState) => state?.connection);
  const workspaceDetails = useSelector(
    (state: RootState) => state?.workspace?.workspaceDetails
  );

  // Fetch data
  React.useEffect(() => {
    setIsLoading(true);

    const fetchData = async () => {
      await dispatch(getWorkspaceDetails(workspaceId));
      await dispatch(getAllDomain());
      await dispatch(getWorkspaceRequestAccess(workspaceId));
      await dispatch(getWorkspaceClientApiTokens(workspaceId));
      await dispatch(getAndFilterDataSource(workspaceId, { page: 1, page_size: 6 }));
      await dispatch(getAndFilterDomain(workspaceId, { page: 1, page_size: 6 }));
      await dispatch(getDataSourceTagSearch(workspaceId, {}));
      await dispatch(getDomainDatabaseType(workspaceId));

      setIsLoading(false);
    };

    fetchData();
  }, [workspaceId]);

  // Handle user role
  React.useEffect(() => {
    if (!workspaceDetails || workspaceDetails.length === 0) return;

    const finalUserRole = workspaceDetails[0]?.role;
    if (["domain_admin", "api_user", "app_user"].includes(finalUserRole)) {
      setConditionalDisabled(true);
    }

    setIsDomainUser(finalUserRole === "domain_admin");
    setIsApiUser(finalUserRole === "api_user");
    setIsAppUser(finalUserRole === "app_user");
  }, [workspaceDetails]);

  // Update tabs after loading
  React.useEffect(() => {
    if (isLoading) return;

    let updatedTabs: { label: string }[] = [
      { label: `Connections (${allConnection?.num_results || 0})` },
      { label: `Data Sources (${workspace?.dataSource?.count || 0})` },
      { label: `Domains (${workspace?.domain?.count || 0})` },
      { label: `Client API Tokens` },
      { label: `My Approval` },
    ];

    if (conditionalDisabled) {
      if (isDomainUser || isApiUser) {
        updatedTabs = [
          { label: "Connections" },
          { label: `Data Sources (${workspace?.dataSource?.count || 0})` },
          { label: `Domains (${workspace?.domain?.count || 0})` },
          { label: "Client API Tokens" },
        ];
      } else {
        updatedTabs = [
          { label: "Connections" },
          { label: `Data Sources (${workspace?.dataSource?.count || 0})` },
          { label: `Domains (${workspace?.domain?.count || 0})` },
        ];
      }
    }

    setTabs(updatedTabs);
  }, [isLoading, isDomainUser, isApiUser, conditionalDisabled, allConnection, workspace]);

  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {
    setTabIndex(newValue);
  };

  return (
    <Box p={0.2}>
      {isLoading ? (
        <LinearProgress color="inherit" />
      ) : (
        <>
          <WorkspaceDetailsHeading workspaceDetailsData={workspaceDetails} />
          <CustomWorkspaceCard workspaceData={workspaceDetails} />
          <CustomTabs tabs={tabs} value={tabIndex} onTabChange={handleTabChange} />
          <div style={{ marginTop: 5 }}>
            {tabIndex === 0 && <Connections workspaceId={workspaceId} />}
            {tabIndex === 1 && <DataSourceDetails workspaceId={workspaceId} />}
            {tabIndex === 2 && <DomainDetails workspaceId={workspaceId} />}
            {tabIndex === 3 && (
              <ClientAPITokenDetails
                tabIndex={tabIndex}
                workspaceId={workspaceId}
                filterConfig={{
                  autoComplete: {
                    isRequired: true,
                    data: [{ name: "Domains" }],
                  },
                }}
              />
            )}
            {conditionalDisabled && tabIndex === 4 && <MyApprovalDetails tabIndex={tabIndex} />}
          </div>
        </>
      )}
    </Box>
  );
};

export default WorkspaceDetails;
