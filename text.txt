import { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { fetchConversations } from "../redux/actions";
import { Box, Typography, IconButton, Divider, TextField } from "@mui/material";
import CloseIcon from "@mui/icons-material/Close";
import dayjs from "dayjs";

const Sidebar = ({ toggleLeftPanel }) => {
  const dispatch = useDispatch();
  const conversations = useSelector((state) => state.chat.conversations) || [];
  const [search, setSearch] = useState("");
  const [selectedThread, setSelectedThread] = useState(null);
  const [groupedConversations, setGroupedConversations] = useState({});

  useEffect(() => {
    dispatch(fetchConversations()); // Fetch chat threads
  }, [dispatch]);

  useEffect(() => {
    if (conversations.length > 0) {
      console.log("Conversations from useSelector:", conversations); // Debugging log

      // ✅ Extract proper dates for today, yesterday, etc.
      const today = dayjs().startOf("day");
      const yesterday = dayjs().subtract(1, "day").startOf("day");
      const last7Days = dayjs().subtract(7, "day").startOf("day");
      const lastMonth = dayjs().subtract(30, "day").startOf("day");

      // ✅ Correctly extract the `YYYY-MM-DD` part from `last_updated_date`
      const getFormattedDate = (dateString) => dayjs(dateString.split(" ")[0], "YYYY-MM-DD").startOf("day");

      // ✅ Correct Grouping Logic
      const grouped = {
        Today: conversations.filter((c) => getFormattedDate(c.last_updated_date).isSame(today, "day")),
        Yesterday: conversations.filter((c) => getFormattedDate(c.last_updated_date).isSame(yesterday, "day")),
        "Last 7 Days": conversations.filter(
          (c) => getFormattedDate(c.last_updated_date).isAfter(last7Days) && getFormattedDate(c.last_updated_date).isBefore(yesterday)
        ),
        "Last Month": conversations.filter(
          (c) => getFormattedDate(c.last_updated_date).isAfter(lastMonth) && getFormattedDate(c.last_updated_date).isBefore(last7Days)
        ),
      };

      console.log("Grouped Conversations:", grouped); // Debugging log
      setGroupedConversations(grouped);
    }
  }, [conversations]); // Re-run when conversations change

  return (
    <Box p={2} width={300} sx={{ border: "1px solid #ccc", borderRadius: "8px", background: "#fff" }}>
      {/* New Chat Button */}
      <Box
        sx={{
          background: "#4CAF50",
          color: "#fff",
          textAlign: "center",
          padding: "10px",
          borderRadius: "5px",
          cursor: "pointer",
          mb: 2,
        }}
        onClick={() => setSelectedThread(null)}
      >
        Create New Chat +
      </Box>

      {/* Search Field */}
      <TextField
        fullWidth
        variant="outlined"
        placeholder="Search chats..."
        size="small"
        value={search}
        onChange={(e) => setSearch(e.target.value)}
        sx={{ mb: 2 }}
      />

      {/* Chat Threads Header */}
      <Box sx={{ display: "flex", justifyContent: "space-between", alignItems: "center", mb: 1 }}>
        <Typography variant="h6">Chat Threads</Typography>
        <IconButton onClick={toggleLeftPanel}>
          <CloseIcon />
        </IconButton>
      </Box>

      {/* Scrollable Conversations List */}
      <Box sx={{ maxHeight: "400px", overflowY: "auto", pr: 1 }}>
        {Object.entries(groupedConversations).map(([label, threads]) =>
          threads.length > 0 ? (
            <Box key={label} mt={2}>
              <Typography variant="subtitle2" color="textSecondary" sx={{ mb: 1 }}>
                {label}
              </Typography>
              <Divider />
              {threads
                .filter((thread) => thread.title.toLowerCase().includes(search.toLowerCase()))
                .map((thread) => (
                  <Box
                    key={thread.thread_id}
                    sx={{
                      padding: "10px",
                      marginTop: "5px",
                      borderRadius: "5px",
                      cursor: "pointer",
                      background: selectedThread === thread.thread_id ? "#D3D3D3" : "transparent",
                      "&:hover": { background: "#f0f0f0" },
                    }}
                    onClick={() => setSelectedThread(thread.thread_id)}
                  >
                    {thread.title}
                  </Box>
                ))}
            </Box>
          ) : null
        )}
      </Box>
    </Box>
  );
};

export default Sidebar;
