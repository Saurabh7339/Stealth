import React, { useState } from "react";
import {
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  ListItemAvatar,
  Avatar,
  ListItemText,
  Checkbox,
  Chip,
  Box,
} from "@mui/material";

const users = [
  { id: 1, full_name: "John Doe", username: "johndoe" },
  { id: 2, full_name: "Jane Smith", username: "janesmith" },
  { id: 3, full_name: "Alice Johnson", username: "alicej" },
  { id: 4, full_name: "Bob Brown", username: "bobbrown" },
];

export default function UserSelect() {
  const [selectUser, setSelectUser] = useState<string[]>([]); // Selected usernames
  const [search, setSearch] = useState(""); // Search input for typing
  const [inputValue, setInputValue] = useState(""); // Value typed by user in the select

  const handleUserChange = (event: any) => {
    setSelectUser(event.target.value);
  };

  const handleInputChange = (event: React.ChangeEvent<{ value: unknown }>) => {
    setInputValue(event.target.value as string);
  };

  const handleDelete = (username: string) => {
    setSelectUser(selectUser.filter((u) => u !== username));
  };

  // Filter users based on search input
  const filteredUsers = users.filter(
    (user) =>
      user.full_name.toLowerCase().includes(search.toLowerCase()) ||
      user.username.toLowerCase().includes(search.toLowerCase())
  );

  return (
    <FormControl size="small" fullWidth>
      <InputLabel id="demo-select-small-label">Select Users</InputLabel>
      <Select
        labelId="demo-select-small-label"
        id="demo-select-small"
        multiple
        value={selectUser}
        name="username"
        onChange={handleUserChange}
        onInputChange={(e) => setSearch(e.target.value)} // Handle search input
        onOpen={() => setInputValue('')} // Clear input when menu opens
        inputProps={{
          startAdornment: (
            <Box sx={{ display: "flex", flexWrap: "wrap", gap: 0.5 }}>
              {/* Render chips for selected usernames */}
              {selectUser.map((username) => {
                const user = users.find((u) => u.username === username);
                return (
                  <Chip
                    key={username}
                    label={user ? user.full_name : username}
                    onDelete={() => handleDelete(username)}
                    avatar={user ? <Avatar>{user.full_name.charAt(0)}</Avatar> : undefined}
                  />
                );
              })}
            </Box>
          ),
          value: inputValue, // Bind the typed value to Select input
          onChange: handleInputChange, // Update input value as user types
        }}
        MenuProps={{ PaperProps: { style: { maxHeight: 300 } } }}
      >
        {/* Render filtered users based on search */}
        {filteredUsers.map((user) => (
          <MenuItem key={user.id} value={user.username}>
            <Checkbox checked={selectUser.includes(user.username)} />
            <ListItemAvatar>
              <Avatar>{user.full_name.charAt(0)}</Avatar>
            </ListItemAvatar>
            <ListItemText primary={user.full_name} secondary={`@${user.username}`} />
          </MenuItem>
        ))}
      </Select>
    </FormControl>
  );
}
